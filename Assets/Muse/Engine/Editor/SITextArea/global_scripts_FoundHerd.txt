using UnityEngine;using System.Linq;using System.Collections;using System.Collections.Generic;public class global_scripts_FoundHerd {public void Run() {
Debug.Log("FoundHerd()");
Debug.Log("setting P4HuntedBufThisSeason true");

GameFlags.P4HuntedBufThisSeason = true;

var herd = GameFlags.P4Herd.Pick(GameFlags.P4CurrentBuffaloSizeChance);


var wasted = false;

////////////////////// WHITE BUFF
var chanceWhite = GameFlags.P4WhiteBuffaloChance;
// buf dance increases chance of white
if (GameFlags.P4Dance) chanceWhite += 10;
     
var result = UnityEngine.Random.Range(1, 100);

var foundWhite = result <= chanceWhite;
if (foundWhite)
{
     // found it!!
     GameFlags.P4WhiteBuf = true;
     Debug.Log("found a white! setting P4WhiteBuf to true");
     GameFlags.P4WhiteBuffaloHides = 1;
}

/////////////////////////////////////////





if (GameFlags.P4FirstHunt)
{
     Debug.Log("**** FIRST HUNT GUARANTEED HERD SIZE ****");
     herd = GameFlags.P4Herd.Find(x=>x.Id == "L");
     GameFlags.P4FirstHunt = false;
}
else
{
     var curNode = GameFlags.P4CurNode;
     // MODIFY  HERD BASED ON LOCATION
     if (curNode == "hunting_grounds")
     {
          Debug.Log("...hunting grounds herd mod... always small"); // always small
          
          // no larger than SMALL
          if (herd.Id == "XL" || herd.Id == "L" || herd.Id == "M")
          {
               herd = GameFlags.P4Herd.Find(x=>x.Id == "S");
          }
     }
     else if (curNode == "sioux")
     {
          Debug.Log("...great sioux herd mod - capped at med");
          
          // no larger than MED
          if (herd.Id == "XL" || herd.Id == "L")
          {
               herd = GameFlags.P4Herd.Find(x=>x.Id == "M");
          }
     }
}

Debug.Log("max herd size weight: " + GameFlags.P4CurrentBuffaloSizeChance);
Debug.Log("herd size: " + herd.Id);
GameFlags.P4HerdSizeString = herd.Id;
string ret = "Your hunters find " + herd.Description;
var herdMod = herd.Mod;


// add mods
float fMod = 0;

fMod += GameFlags.tArchery * GameFlags.P4ArcheryMod;   // %p3_archery_mod
fMod += GameFlags.tRiflery * GameFlags.P4RifleryMod;    // %p3_riflery_mod
fMod += GameFlags.P4HorseCount * GameFlags.P4FastHorseMod;  // %p3_fasthorse_mod
fMod += GameFlags.P4GunCount * GameFlags.P4GunMod;  // %p3_gun_mod
fMod += Quest.GetQuest("bravery").Rank * GameFlags.P4BraveryMod;  // %p3_bravery_mod
fMod += GameFlags.tCrazy * GameFlags.P4CrazyMod;   // %p3_crazy_mod
fMod += GameFlags.tHorseSense * GameFlags.P4HorseSkillMod; // %p3_horse_skill_mod

var specialsMod = (1 + (fMod / 100));

Debug.Log("warriors * herdMod: " + (GameFlags.P4WarriorCount * herdMod));
Debug.Log("special food mods (horse, etc): " + specialsMod);

var newFood = (GameFlags.P4WarriorCount * herdMod) * specialsMod;
Debug.Log("total hunted: " + newFood);

var campBonus = GameFlags.P4CampBuffaloBonus;
if (campBonus)
{
     Debug.Log("adding co-camping bonus to raw meat yield");
     newFood *= 1.2f;
}


var baseP = GameFlags.P4BaseProcessing;

var supplyMod = (GameFlags.P4Supplies / 10) * .1f;
Debug.Log("supplymod " + supplyMod);

var processLimit = Mathf.CeilToInt(GameFlags.P4FemaleCount * (baseP + supplyMod));
Debug.Log("      female processing limit (femcount * (baseProcessing + supplyMod)): " + processLimit);

var wastedFood = 0;

newFood = Mathf.Ceil(newFood);

if (newFood > processLimit)
{
     wastedFood = (int)(newFood - processLimit);
     GameFlags.P4Waste = wastedFood;
     Debug.Log("There is more meat than the women can process. Some is wasted.");
     //wastedFood = Math.ceil(wastedFood);
     if (wastedFood == 0)
          wastedFood = 1;
     wasted = true;
     newFood = processLimit;
}
else
{
     GameFlags.P4Waste = 0;
     wasted = false;
}

Debug.Log("     adjusted new food: " + newFood);
GameFlags.P4NewFood = (int)newFood;

var r = UnityEngine.Random.Range(1, 100);
string suitor = GameFlags.P2SuitorChoice;

string person;

if (r < 25)
{
     person = "Crooked Rabbit";
}
else if (r < 50)
{
     person = "Your uncle";
}
else if (r < 75)
{
     person = (suitor == "soc") ? "Black Moon" : "Many Horses";
}
else
{
     person = "You";
}

string kill = (person == "You") ? "kill" : "kills";

// create details
if (foundWhite)
{
     ret += " " + person;
     ret += " " + kill;
     ret += " a lucky white buffalo!";
}
else
{
     r = UnityEngine.Random.Range(1, 3);
     Debug.Log("detail #" + r);
     switch (r)
     {
          case 0: ret += " You and the warriors kill many of them."; break;
          case 1: ret += " The hunt is a success, but one warrior is badly hurt."; break;
          case 2: ret += " " + person + " " + kill + " a buffalo with a single shot!"; break;
     }
}

// skill increase
r = UnityEngine.Random.Range(1, 100);
if (r < 33)
{
     // var bm:BadgeManager = BadgeManager.getInstance();
     
     r = UnityEngine.Random.Range(1, 100);
     /*if (bm.hasBadge("BADGE_ARCHERY3") && bm.hasBadge("BADGE_RIFLERY3") && bm.hasBadge("BADGE_HORSESENSE3"))
     {
          // terrific
     }
     else
          */
     
     if (r < 33)
     {
          GameFlags.tArchery++;
          ret += " You improve your bow skill.";
          GameFlags.P4BowUp = true;
     }
     else if (r < 66)
     {
          GameFlags.tRiflery++;
          ret += " You get better at shooting a rifle.";
          GameFlags.P4RifleUp = true;
     }
     else
     {
          GameFlags.tHorseSense++;
          ret += " You gain more skill at riding a horse.";
          GameFlags.P4HorseUp = true;
     }
     
}

GameFlags.P4HuntResult = ret;

ret = "";
if (wasted)
{
     ret += " The women process as much of the meat and hides as they can (" + newFood + " food). However some food (" + wastedFood + ") will spoil before the women can get to it.";
}
else
{
     ret += " The women process as much of the meat and hides as they can (" + newFood + " food).";
}

// M3Tools.Out(">>> setting $p3_process_result to " + ret);
GameFlags.P4ProcessResult = ret;

}}